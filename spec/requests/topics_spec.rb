require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/topics', type: :request do
  before(:each) do
    load 'db/seeds.rb'
    @admin_user = User.first
    @basic_user = User.last
  end
  # This should return the minimal set of attributes required to create a valid
  # Topic. As you add validations to Topic, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      label: 'Python',
      icon: 'https://tinkercademy.com/wp-content/uploads/2018/04/python-icon-300x300.png'
    }
  end

  let(:invalid_attributes) do
    {
      label: 'Python',
      icon: 'no url'
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TopicsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {
      Authorization: "Bearer #{@admin_user.generate_jwt}"
    }
  end

  let(:basic_user_headers) { { Authorization: "Bearer #{@basic_user.generate_jwt}" } }

  describe 'GET /index' do
    context 'with admin user' do
      it 'renders a successful response with a list of topics for an admin user' do
        get topics_url, headers: valid_headers
        expect(response).to be_successful
        expect(response.body).to include 'React'
        expect(response.body).to include 'Bootstrap'
        expect(response.body).to include 'Laravel'
        expect(response.body).to include 'Node.js'
      end
    end

    context 'with basic user' do
      it 'renders a successful response with a list of topics for a basic user' do
        get topics_url, headers: basic_user_headers
        expect(response).to be_successful
        expect(response.body).to include 'React'
        expect(response.body).to include 'Bootstrap'
        expect(response.body).to include 'Laravel'
      end
    end

    context 'without authentication' do
      it 'renders a JSON response with an error in the body' do
        get topics_url
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include 'Must be logged in'
      end
    end
  end

  describe 'POST /create' do
    context 'with valid parameters and admin user' do
      it 'creates a new Topic' do
        expect do
          post topics_url,
               params: { topic: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Topic, :count).by(1)
      end

      it 'renders a JSON response with the new topic' do
        post topics_url,
             params: { topic: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include 'label'
        expect(response.body).to include 'Python'
        expect(response.body).to include 'icon'
      end
    end

    context 'with invalid parameters' do
      it "doesn't creates a new Topic" do
        expect do
          post topics_url,
               params: { topic: invalid_attributes }, headers: valid_headers, as: :json
        end.to change(Topic, :count).by(0)
      end

      it 'renders a JSON response with an error in the body' do
        post topics_url,
             params: { topic: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include 'only accepts urls'
      end
    end

    context 'with basic user' do
      it 'does not authorize the creating of a new Topic' do
        expect do
          post topics_url,
               params: { topic: valid_attributes }, headers: basic_user_headers, as: :json
        end.to change(Topic, :count).by(0)
      end

      it 'renders a JSON response with an error in the body' do
        post topics_url,
             params: { topic: valid_attributes }, headers: basic_user_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include 'You are not authorized to access this page.'
      end
    end


    context 'with no user' do
      it 'does not authorize the creating of a new Topic' do
        expect do
          post topics_url,
               params: { topic: valid_attributes }, as: :json
        end.to change(Topic, :count).by(0)
      end

      it 'renders a JSON response with an error in the body' do
        post topics_url,
             params: { topic: valid_attributes }, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include 'Must be logged in'
      end
    end
    # context 'with admin user' do
    #   it 'renders a successful response with a list of topics for an admin user' do
    #     get topics_url, headers: valid_headers
    #     expect(response).to be_successful
    #     expect(response.body).to include 'React'
    #     expect(response.body).to include 'Bootstrap'
    #     expect(response.body).to include 'Laravel'
    #     expect(response.body).to include 'Node.js'
    #   end
    # end

    # context 'with basic user' do
    #   it 'renders a successful response with a list of topics for a basic user' do
    #     get topics_url, headers: basic_user_headers
    #     expect(response).to be_successful
    #     expect(response.body).to include 'React'
    #     expect(response.body).to include 'Bootstrap'
    #     expect(response.body).to include 'Laravel'
    #   end
    # end

    # context 'without authentication' do
    #   it 'renders a JSON response with an error in the body' do
    #     get topics_url
    #     expect(response).to have_http_status(:unauthorized)
    #     expect(response.content_type).to match(a_string_including('application/json'))
    #     expect(response.body).to include 'Must be logged in'
    #   end
    # end
  end
end
